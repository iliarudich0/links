
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
import os

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
API_TOKEN = os.getenv('TELEGRAM_API_TOKEN')  # Insert your Telegram bot token here
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# Create the main menu
main_menu = ReplyKeyboardMarkup(resize_keyboard=True)
button_books = KeyboardButton('üìö –°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥')
main_menu.add(button_books)

# Dictionary to store book links
books = {
    "–ö–Ω–∏–≥–∞ 1": "https://drive.google.com/file/d/your_link_1/view?usp=sharing",
    "–ö–Ω–∏–≥–∞ 2": "https://drive.google.com/file/d/your_link_2/view?usp=sharing",
    "–ö–Ω–∏–≥–∞ 3": "https://drive.google.com/file/d/your_link_3/view?usp=sharing",
    # Add more books here as needed
}

@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    """Send a welcome message and show the main menu."""
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–Ω–∏–≥–∞–º. "
        "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–ø–∏—Å–∫–∞ –∫–Ω–∏–≥, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã.", 
        reply_markup=main_menu
    )

@dp.message_handler(lambda message: message.text == 'üìö –°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥')
async def send_book_list(message: types.Message):
    """Send the list of available books as clickable links."""
    response = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–∏–≥–∏:\n\n"
    for book_name, book_link in books.items():
        response += f"<a href=\"{book_link}\">{book_name}</a>\n"
    await message.reply(response, parse_mode="HTML")

@dp.message_handler()
async def handle_unknown_message(message: types.Message):
    """Handle unknown messages."""
    await message.reply(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –º–µ–Ω—é.", 
        reply_markup=main_menu
    )

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
